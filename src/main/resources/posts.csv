"id","p__title","p__body","p__accepted_answer_id","p__answer_count","p__comment_count","p__community_owned_date","p__creation_date","p__favorite_count","p__last_activity_date","p__last_edit_date","p__last_editor_display_name","p__last_editor_user_id","p__owner_display_name","owner_user_id","p__parent_id","p__post_type_id","score","p__tags","p__view_count"
"31451767","null","<p>Got this but I'm quite unsure of the performance of it:</p> <pre class= lang-r prettyprint-override ><code>letters <- strsplit(paste(mydf$REFmydf$ALTsep=  )  ) # concatenate the letters to have an index to work on from the numbers values <- t(mydf[3:ncol(mydf)]) # let's work on each column needing values nbval <- ncol(values) # Save time for later and save the length of values #Prepare the two temp vectors used later chars <- vector( character 2) ret <- vector( character nbval) #Loop over the rows (and transpose the result) t(sapply(rownames(values) function(x) { indexes <- strsplit(values[x] / ) # Get a list with pairs of indexes for(i in 1:nbval) { # Loop over the number of columns :/ for (j in 1:2) { # Loop over the pair chars[j] <- ifelse(indexes[[i]][j] == .  NA letters[[i]][as.integer(indexes[[i]][j])+1]) # Get NA if . or the letter with the correct index at this postion } ret[i] <- paste0(chars[1]chars[2]) # concatenate the two chars } return(ret) # return this for this row } )) </code></pre> <p>Output with sample data:</p> <pre><code> [1] [2] [3] [4] [5] X860 NANA TC GG NANA NANA X861 NANA CG GG NANA NANA X862 GG TC NANA CC NANA </code></pre> <hr> <p>Updated version of the function (as the rest of code does not change) from comment:</p> <pre><code>#Loop over the rows (and transpose the result) t(sapply(rownames(values) function(x) { indexes <- strsplit(values[x] / ) # Get a list with pairs of indexes for(i in 1:nbval) { # Loop over the number of columns :/ if (values[xi] == ./. ) { # test if we have ./. and if yes set to NA ret[i] <- NA } else { # if it's not ./. then try to find the corresponding letters for (j in 1:2) { # Loop over the pair chars[j] <- ifelse(indexes[[i]][j] == .  NA letters[[i]][as.integer(indexes[[i]][j])+1]) # Get NA if . or the letter with the correct index at this postion } ret[i] <- paste0(chars[1]chars[2]) # concatenate the two chars } } return(ret) # return this for this row } )) </code></pre> <p>Output:</p> <pre><code> [1] [2] [3] [4] [5] X860 NA TC GG NA NA X861 NA CG GG NA NA X862 GG TC NA CC NA </code></pre>","null","null","11","null","2015-07-16 10:31:44.710 UTC","null","2015-08-24 15:50:07.120 UTC","2015-08-24 15:50:07.120 UTC","null","3627607","null","3627607","31449925","2","4","","null"
"34044542","null","<p>An integer will not store the decimal value. So if you have 8 in cell E8 you are getting 8 in the int and then writing 8 + .01 to cell E8 so you get 8.01.</p> <p>The next time you read 8.01 into the int VB is rounding off the decimals so you are getting 8 in the int again and adding the same value back in.</p> <p>You need to change the variable to decimal variable.</p> <p>Taking out the variable declaration will just make VB guess what to use and that is not a good practice. You should use Option Explicit at the top of your code to prevent this.</p> <pre><code>Option Explicit Private Sub SpinButton1_SpinUp() Dim i As Double i = Sheet1.Range( E8 ).Value Sheet1.Range( E8 ) = i + 0.01 End Sub </code></pre> <p>You could also use</p> <pre><code>Dim i As Single </code></pre> <p>depending on the size of the decimal that it could get to.</p>","null","null","3","null","2015-12-02 13:55:19.283 UTC","null","2015-12-02 14:02:56.150 UTC","2015-12-02 14:02:56.150 UTC","null","5073840","null","5073840","34044148","2","3","","null"
"35606887","null","<p>Check out the sandbox sample that is in the Prism repo.. It's actually quite simple.</p> <p><a href= https://github.com/PrismLibrary/Prism/tree/master/Sandbox/Xamarin/HelloWorld rel= nofollow >https://github.com/PrismLibrary/Prism/tree/master/Sandbox/Xamarin/HelloWorld</a></p> <p>You just have to call navigate from your MasterDetilPage ViewModel. This will set the Detail page accordingly.</p>","null","null","1","null","2016-02-24 15:57:37.370 UTC","null","2016-02-24 15:57:37.370 UTC","null","null","null","null","5420778","35604135","2","1","","null"
"31436414","null","<p>That is Visual Studio (.NET). VBA Integer is 32768. Use a long.</p> <p>A VBA Long variable holds whole numbers from -2147483648 to 2147483647 and uses 4 bytes (32 bits) of memory.</p> <pre><code>Dim LastRow as Long </code></pre>","null","null","4","null","2015-07-15 16:51:05.857 UTC","null","2015-07-15 16:51:05.857 UTC","null","null","null","null","5073840","31436397","2","17","","null"
"34111598","null","<p>I made these changes above the <code>Dim Resp As New DOMDocument60</code>. That get's me to a cannot make connection to the server. You may be able to connect with your account with this.</p> <p>Don't overlook the change of <code>Dim Req As Object</code></p> <pre><code>Dim WS As Worksheet: Set WS = ActiveSheet Dim strResult As String WS.Range( theDate ).Value = WS.Range( highTemps ).Value = WS.Range( lowTemps ).Value = Dim delShape As Shape For Each delShape In WS.Shapes If delShape.Type = msoAutoShape Then delShape.Delete Next delShape Dim Req As Object Set Req = CreateObject( WinHttp.WinHttpRequest.5.1 ) Req.Open GET  http://api.worldweatheronline.com/free/v2/weather.ashx?q=Hong%20Kong&format=XML&num_of_days=5&key=d3e0463dc48afecc7815bbf8ffb92  False Req.setRequestHeader User-Agent  Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0) Req.setRequestHeader Content-type  application/x-www-form-urlencoded Req.send 'strResult = Req.responseText 'Worksheets( Sheet3 ).Range( A10:A10 ) = strResult Dim Resp As New DOMDocument60 </code></pre> <p><strong>EDIT: for the error setting the usepicture</strong></p> <p>Take a look <a href= http://stackoverflow.com/questions/11844260/vba-excel-shape >here</a>. The shape is being filled with the pic a bit different. You are declaring your shape then try doing a <code>set wShape = ActiveSheet.Shapes.AddPicture</code></p> <pre><code>Dim wShape As Shape Set wShape = ActiveSheet.Shapes.AddPicture(Weather.SelectNodes( weatherIconUrl ).Item(0).Text msoFalse msoTrue 0 0 100 100) </code></pre> <p>That is assuming that Weather.SelectNodes( weatherIconUrl ).Item(0).Text has the path to a picture. You will want to verify that.</p>","null","null","14","null","2015-12-05 22:20:20.400 UTC","null","2015-12-06 14:03:56.320 UTC","2015-12-06 14:03:56.320 UTC","null","5073840","null","5073840","34111033","2","2","","null"
"33264744","null","<p>If it helps here is an example of a simple VB.NET app that I wrote a long time ago to test speed of VB vs C#. It is a different way of going about creating a workbook and writing to it.</p> <pre><code>Imports Excel = Microsoft.Office.Interop.Excel Public Class Form1 Private Sub Button1_Click(sender As System.Object e As System.EventArgs) Handles Button1.Click Dim xlApp As New Excel.Application Dim xlWorkBook As Excel.Workbook Dim xlWorkSheet As Excel.Worksheet Dim misValue As Object = System.Reflection.Missing.Value xlWorkBook = xlApp.Workbooks.Add(misValue) xlWorkBook.Application.Visible = True xlWorkBook.Application.ScreenUpdating = False xlWorkSheet = xlWorkBook.Sheets( sheet1 ) xlWorkSheet.SaveAs( C:\\vbexcel.xlsx ) Dim l As Long l = 1 Do While l < 500 'xlWorkSheet.Cells(l 1) = l xlWorkSheet.Range( A & l).Value = l 'xlWorkSheet.Cells(l 2) = l 'xlWorkSheet.Cells(l 3) = l l = l + 1 Loop xlWorkBook.Application.ScreenUpdating = True xlWorkBook.RefreshAll() xlWorkBook.Save() 'xlWorkBook.Close() 'xlApp.Quit() releaseObject(xlApp) releaseObject(xlWorkBook) releaseObject(xlWorkSheet) MsgBox( Done ) End Sub Private Sub releaseObject(ByVal obj As Object) Try System.Runtime.InteropServices.Marshal.ReleaseComObject(obj) obj = Nothing Catch ex As Exception obj = Nothing Finally GC.Collect() End Try End Sub End Class </code></pre>","null","null","3","null","2015-10-21 16:37:21.047 UTC","null","2015-10-27 21:51:56.963 UTC","2015-10-27 21:51:56.963 UTC","null","875317","null","5073840","33264298","2","4","","null"
"34159459","null","<p>You main problem is the <code>.*</code> part in the second alternation by default regex are greedy and match as much as possible.</p> <p>You can turn it into lazy or ungreedy by adding a <code>?</code> after the repetition operator.</p> <p>So with little change this would do:</p> <pre><code>(@p[0-9]+)\s+=\s+(\d+|N'.+?'$|NULL) </code></pre> <p><a href= http://rubular.com/r/SXizep0keU rel= nofollow >Rubular example</a></p> <p>There's some unknown from you description on the spaces I used <code>+</code> as repetition operator assuming there will be at least 1 present around the <code>=</code> sign as in the single quotes I assume they are never empty. Replace by <code>*</code> if they are optionnal.</p>","null","null","3","null","2015-12-08 15:16:40.907 UTC","null","2015-12-08 15:16:40.907 UTC","null","null","null","null","3627607","34159313","2","2","","null"
"32382019","null","<p>Loop through and put the formula in to the cell formula. Here the string is fixed.</p> <pre><code>commandstring = {=INDEX( & firstArgument & MATCH(1( & secondArgument & = & condition1 & )*( & thirdArgument & = & condition2 & )*( & patid1 & = & condition3 & )0))} Dim lRow As Long Dim ws As Excel.Worksheet Set ws = ActiveWorkbook.Sheets( Sheet1 ) lRow = 1 'Loop through and put the formula in each cell Do While lRow <= ws.UsedRange.Rows.count ws.Range( B & lRow).Formula = {=INDEX( & firstArgument & MATCH(1( & secondArgument & = & condition1 & )*( & thirdArgument & = & condition2 & )*( & patid1 & = & condition3 & )0))} lRow = lRow + 1 Loop </code></pre> <p>Or if you really want to use it in a string variable.</p> <pre><code>ws.Range( B & lRow).Formula = commandstring </code></pre>","null","null","3","null","2015-09-03 17:31:16.360 UTC","null","2015-09-03 17:50:53.253 UTC","2015-09-03 17:50:53.253 UTC","null","5073840","null","5073840","32381685","2","1","","null"
"34295087","null","<p>See end of answer for a better approach this one is for easy understanding of the steps.</p> <p>I'm unsure what you're willing to do but maybe this:</p> <pre><code>df2<- as.data.frame( lapply( df function(x){ as.integer( cut(x quantile(x probs=(0:5)/5 na.rm=T))) })) colnames(df2) <- paste0( quartile_ colnames(df)) df3 <- cbind(dfdf2) </code></pre> <p>Which gives:</p> <pre><code> A B C quartile_A quartile_B quartile_C 1 0.6057 0.1644 6.93 4 5 4 2 0.5723 0.1170 6.59 4 2 3 3 0.5614 0.1552 7.02 3 4 5 4 0.4102 0.1059 5.24 NA 2 1 5 0.4945 0.0857 6.64 1 1 4 6 0.5157 0.0747 7.06 2 NA 5 7 0.7785 0.1394 5.21 5 3 NA 8 0.5492 0.1557 6.06 3 4 2 9 0.5411 0.1884 5.68 2 5 2 10 0.6622 0.1480 6.10 5 3 3 </code></pre> <p>Datas used:</p> <pre><code>> dput(df) structure(list(A = c(0.6057 0.5723 0.5614 0.4102 0.4945 0.5157 0.7785 0.5492 0.5411 0.6622) B = c(0.1644 0.117 0.1552 0.1059 0.0857 0.0747 0.1394 0.1557 0.1884 0.148 ) C = c(6.93 6.59 7.02 5.24 6.64 7.06 5.21 6.06 5.68 6.1)) .Names = c( A  B  C ) class = data.frame  row.names = c(NA -10L)) </code></pre> <hr> <p>As per @DavidArenburg comment below a better way to achieve the same result is:</p> <pre><code>df[paste0( quartile_ colnames(df))] <- lapply(df function(x) as.integer(cut(x quantile(x probs=(0:5)/5 na.rm = TRUE)))) </code></pre> <p>This avoid creating a new dataframe and copying it over at end.</p>","null","null","7","null","2015-12-15 16:58:44.860 UTC","null","2015-12-16 16:10:54.437 UTC","2015-12-16 16:10:54.437 UTC","null","3627607","null","3627607","34294346","2","3","","null"
"29914402","null","<p>Sounds a little convoluted but works:</p> <pre><code>function closest(arraysearched) { distance=999999; # this should be higher than the max index to avoid returning null split(searchedskeysOFS) # Get the first part of key for (x in array) { # loop over the array to get its keys split(xmkeysOFS) # split the array key (mkeys[1]+0 > skeys[1]+0) ? tmp = mkeys[1] - skeys[1] : tmp = skeys[1] - mkeys[1] # +0 to compare integers ternary operator to reduce code compute the diff between the key and the target if (tmp < distance) { # if the distance if less than preceding update distance = tmp found1 = mkeys[1] # and save the key actually found closest } } # At this point we have the first part of key found let's redo the work for the second part distance=999999; for (x in array) { split(xmkeysOFS) if (mkeys[1] == found1) { # Filter on the first part of key (mkeys[2]+0 > skeys[2]+0) ? tmp = mkeys[2] - skeys[2] : tmp = skeys[2] - mkeys[2] # +0 to compare integers ternary operator to reduce code compute the diff between the key and the target if (tmp < distance) { # if the distance if less than preceding update distance = tmp found2 = mkeys[2] # and save the key actually found closest } } } # Now we got the second field woot return (found1 OFS found2) # return the combined key from out two search },{ if (NR>FNR) { # If we changed file (File Number Record is less than Number Record) change array b[($1 OFS $2)] = $4 # make a array with $1 $2 as key and $4 as value } else { key = ($1 OFS $2) # Make the key to avoid too much computation accessing it later akeys[max++] = key # store the array keys to ensure order at end as for (x in array) does not guarantee the order a[key] = $5 # make an array with the key stored previously and $5 as value } } END { # Now we ended parsing the two files print the result for (i in akeys) { # loop over the array of keys which has a numeric index keeping order print akeys[i]a[akeys[i]] # print the value for the first array (key then value) if (akeys[i] in b) { # if the same key exist in second file print akeys[i]b[akeys[i]] # then print it } else { bindex = closest(bakeys[i]) # call the function to find the closest key from second file print bindexb[bindex] # print what we found } } } </code></pre> <p>Note I'm using OFS to combine the fields so if you change it for output it will behave properly.</p> <p><strong>WARNING</strong>: This should do with relative short files but as now the array from second file is traversed twice it will be twice long for each search<strong>END OF WARNING</strong></p> <p>There's place for a better search algorithm if your files are sorted (but it was not the case on previous question and you wished to keep the order from the file). First improvement in this case break the for loop when distance start to be greater than preceding one.</p> <p>Output from your sample files:</p> <pre><code>$ mawk -f closest2.awk f1 f2 1 2 a1 1 2 b 1 4 b1 1 4 d 8 5 c1 9 5 g </code></pre>","null","null","10","null","2015-04-28 08:38:26.197 UTC","null","2015-04-28 08:38:26.197 UTC","null","null","null","null","3627607","29901881","2","1","","null"
"31618067","null","<p>If you want to loop through a whole sheet you can do it like this.</p> <pre><code>Dim lRow as long Dim strA as string Dim strB as string Dim ws As Excel.Worksheet Set ws = ActiveWorkbook.Sheets( Sheet1 ) lRow = 1 Do While lRow <= ws.UsedRange.Rows.count 'Read the data from columnA strA = ws.Range( A & lRow).Value 'do something with the value you got from A strB = strA & some other text strB = log(strA) 'Write it to C ws.Range( C & lRow).Value = strB lRow = lRow + 1 ws.Range( A & lRow).Activate Loop </code></pre> <p>Or if you just want a certain predefined row it would be more hard coded like this.</p> <pre><code>'Read the data from columnA strA = ws.Range( A6 ).Value 'do something with the value you got from A strB = strA & some other text strB = log(strA) 'Write it to C ws.Range( C6 ).Value = strB </code></pre>","null","null","4","null","2015-07-24 19:09:58.820 UTC","null","2015-07-24 19:28:55.750 UTC","2015-07-24 19:28:55.750 UTC","null","5073840","null","5073840","31617819","2","1","","null"
"34175862","null","<p>Alternative solution is to use <a href= https://docs.chef.io/knife_status.html rel= nofollow ><code>knife status</code></a> which will list nodes with last run update time.</p> <p>Unfortunately knife status has an option to filter healthy nodes (checked in within last hour) but not to filter unhealthy ones so you have to filter the output with something:</p> <pre><code>knife status | awk -F'' 'BEGIN {cmd= date +\ %s\ ; cmd | getline sdate; close(cmd)},{cmd= date -d \ $1 \ +\ %s\ ;cmd | getline rdate; close(cmd); if ((sdate - rdate) <= 3600) print $2}' </code></pre> <p>Awk script detailled:</p> <ul> <li><code>BEGIN {cmd= date +\ %s\ ; cmd | getline sdate; close(cmd)}</code> store the actual date in <code>sdate</code> variable</li> <li><code>{cmd= date -d \ $1 \ +\ %s\ ;cmd | getline rdate; close(cmd);</code> store the run date in <code>rdate</code></li> <li><code>if ((sdate - rdate) <= 3600) print $2}</code> if difference under 1 hour print the node name.</li> </ul> <p>That said @coderanger answer is easiest to adapt to print other informations from the node.</p>","null","null","4","null","2015-12-09 10:01:45.703 UTC","null","2015-12-09 10:01:45.703 UTC","null","null","null","null","3627607","34167433","2","1","","null"
"34070863","null","<p>First idea coming to my mind was to have a look at <code>table</code> definition which start by:</p> <pre><code>> table function (... exclude = if (useNA == no ) c(NA NaN) useNA = c( no  ifany  always ) dnn = list.names(...) deparse.level = 1) { </code></pre> <p>Sounds logical by default table exclude <code>NA</code> and <code>NaN</code>.</p> <p>Digging within table code we see that if <code>x</code>is not a factor it coerce it to a factor (nothing new here it's said in the doc).</p> <pre><code> else { a <- factor(a exclude = exclude) </code></pre> <p>I didn't find anything else which could have impacted the input to coerce <code> NaN </code> into <code>NA</code> values.</p> <p>So looking into factor to get the why we find the root cause:</p> <pre><code>> factor function (x = character() levels labels = levels exclude = NA ordered = is.ordered(x) nmax = NA) { [...] # Snipped for brievety exclude <- as.vector(exclude typeof(x)) x <- as.character(x) levels <- levels[is.na(match(levels exclude))] # defined in the snipped part above is the sorted unique values of input vector coerced to char. f <- match(x levels) [...] f } </code></pre> <p>Here we got it the exclude parameter even being <code>NA</code> values is coerced into a character vector.</p> <p>So what happens is:</p> <pre><code>> ex_vec <- c( Non  Non  Nan  Oui  NaN  NA) > excludes<-c(NANaN) > as.vector(excludes character ) [1] NA NaN > match(ex_vecas.vector(excludes character )) [1] NA NA NA NA 2 1 </code></pre> <p>We do match character NaN as the exclude vector as been coerced to character before comparison.</p>","null","null","3","null","2015-12-03 16:12:35.917 UTC","null","2015-12-03 16:20:47.120 UTC","2015-12-03 16:20:47.120 UTC","null","3627607","null","3627607","34070563","2","5","","null"
"34070863","null","<p>First idea coming to my mind was to have a look at <code>table</code> definition which start by:</p> <pre><code>> table function (... exclude = if (useNA == no ) c(NA NaN) useNA = c( no  ifany  always ) dnn = list.names(...) deparse.level = 1) { </code></pre> <p>Sounds logical by default table exclude <code>NA</code> and <code>NaN</code>.</p> <p>Digging within table code we see that if <code>x</code>is not a factor it coerce it to a factor (nothing new here it's said in the doc).</p> <pre><code> else { a <- factor(a exclude = exclude) </code></pre> <p>I didn't find anything else which could have impacted the input to coerce <code> NaN </code> into <code>NA</code> values.</p> <p>So looking into factor to get the why we find the root cause:</p> <pre><code>> factor function (x = character() levels labels = levels exclude = NA ordered = is.ordered(x) nmax = NA) { [...] # Snipped for brievety exclude <- as.vector(exclude typeof(x)) x <- as.character(x) levels <- levels[is.na(match(levels exclude))] # defined in the snipped part above is the sorted unique values of input vector coerced to char. f <- match(x levels) [...] f } </code></pre> <p>Here we got it the exclude parameter even being <code>NA</code> values is coerced into a character vector.</p> <p>So what happens is:</p> <pre><code>> ex_vec <- c( Non  Non  Nan  Oui  NaN  NA) > excludes<-c(NANaN) > as.vector(excludes character ) [1] NA NaN > match(ex_vecas.vector(excludes character )) [1] NA NA NA NA 2 1 </code></pre> <p>We do match character NaN as the exclude vector as been coerced to character before comparison.</p>","null","null","3","null","2015-12-03 16:12:35.917 UTC","null","2015-12-03 16:20:47.120 UTC","2015-12-03 16:20:47.120 UTC","null","3627607","null","3627607","34070563","2","5","","null"
"32127000","null","<p>Use a workbook object</p> <pre><code>Dim vCrit As Variant Dim wsO As Worksheet Dim wsL As Worksheet Dim rngCrit As Range Dim rngOrders As Range Set wsO = Worksheets( Detail Aging (2) ) Dim wb As Workbook Set wb = Workbooks.Open(Filename:= C:\Users\lm733600\Desktop\Fabrizio\Collectible Blank.xlsm  ReadOnly:=True) set wsL = wb.Sheets( Sheet1 ) Set rngOrders = wsO.Range( $A$1 ).CurrentRegion Set rngCrit = wsL.Range( ColRange ) </code></pre>","null","null","6","null","2015-08-20 19:43:36.690 UTC","null","2015-08-20 19:57:00.073 UTC","2015-08-20 19:57:00.073 UTC","null","5073840","null","5073840","32126847","2","3","","null"
"32335391","null","<p>You need to set range before you can use it.</p> <pre><code>Dim Rng As Range Set Rng = Range( C & i) txt = Rng.Value </code></pre> <p>Also you will need to set i = some row number before you can use it. You now have</p> <pre><code>Dim i As Integer Dim Authors As Variant Set Rng = Range( C & i) </code></pre> <p>But i isn't set yet. You need to set it.</p> <pre><code>Dim i As Integer Dim Authors As Variant i = 1 Set Rng = Range( C & i) </code></pre> <p>EDIT: per OP comments.</p> <p>Look at putting all that into a loop over the rows.</p> <pre><code>Sub SplitTest() Dim ws As Excel.Worksheet Dim lRow As Long Dim txt As String Dim Rng As Range Dim i As Integer Dim Authors As Variant Dim strColumn As String Set ws = Application.ActiveSheet lRow = 1 'Loop through process each row. Do While lRow <= ws.UsedRange.Rows.count Set Rng = Range( C & lRow) txt = Rng.Value Authors = Split(txt [ . ]) 'Loop through the split results and put them in column to the right For i = 0 To UBound(Authors) strColumn = Col_Letter(i + 4) ws.Range(strColumn & lRow) = Authors(i) Next i lRow = lRow + 1 Loop End Sub </code></pre> <p>Add this function</p> <pre><code>Function Col_Letter(lngCol As Long) As String Dim vArr vArr = Split(Cells(1 lngCol).Address(True False) $ ) Col_Letter = vArr(0) End Function </code></pre>","null","null","13","null","2015-09-01 15:23:18.953 UTC","null","2015-09-01 16:21:08.777 UTC","2015-09-01 16:21:08.777 UTC","null","5073840","null","5073840","32335309","2","2","","null"
"31406842","null","<p>Write a macro that uses filesystemobjects to loop through directory where the spreadsheets are. Loop through each sheet and analyse the column names.</p> <p>Here is how you would loop through each sheet.</p> <pre><code>Private Sub CommandButton7_Click() Dim ws As Excel.Worksheet Dim iCol As Integer Dim strName As String Dim iIndex As Integer 'Loop through the sheets. For iIndex = 1 To Application.Worksheets.Count Set ws = Application.Worksheets(iIndex) 'Loop through the columns. For iCol = 1 To ws.UsedRange.Columns.Count 'Check row 1 of this column for first char of * If Left(ws.Cells(1 iCol).Value 1) = * Then 'We have found a column with the first char of * ws.Columns(iCol).EntireColumn.Delete End If Next iCol Next iIndex ActiveWorkbook.SaveAs Filename:= C:\temp\newfiles\ & ActiveWorkbook.Name FileFormat:=xlWorkbookNormal End Sub </code></pre> <p>If you want to look for an * anywhere in the cell you could use instr()</p> <pre><code>Private Sub CommandButton7_Click() Dim ws As Excel.Worksheet Dim iCol As Integer Dim strName As String Dim iIndex As Integer 'Loop through the sheets. For iIndex = 1 To Application.Worksheets.Count Set ws = Application.Worksheets(iIndex) 'Loop through the columns. For iCol = 1 To ws.UsedRange.Columns.Count 'Check row 1 of this column for the char of * If instr(ws.Cells(1 iCol).Value * ) > 0 Then 'We have found a column with the char of * ws.Columns(iCol).EntireColumn.Delete End If Next iCol Next iIndex ActiveWorkbook.SaveAs Filename:= C:\temp\newfiles\ & ActiveWorkbook.Name FileFormat:=xlWorkbookNormal End Sub </code></pre> <p>Here is a basic loop files in a given directory. Hope this gets you there.</p> <pre><code>Private Sub CommandButton7_Click() Dim wb As Workbook Dim ws As Excel.Worksheet Dim iCol As Integer Dim strName As String Dim iIndex As Integer Dim strPath As String Dim strFile As String strPath = c:\temp\oldfiles\ strFile = Dir(strPath & *.xlsx ) Do While strFile <> Set wb = Workbooks.Open(Filename:=strPath & strFile) 'Loop through the sheets. For iIndex = 1 To Application.Worksheets.Count Set ws = Application.Worksheets(iIndex) 'Loop through the columns. For iCol = 1 To ws.UsedRange.Columns.Count 'Check row 1 of this column for the char of * If InStr(ws.Cells(1 iCol).Value * ) > 0 Then 'We have found a column with the char of * ws.Columns(iCol).EntireColumn.Delete End If Next iCol Next iIndex wb.SaveAs Filename:= C:\temp\newfiles\ & wb.Name FileFormat:=xlOpenXMLWorkbook wb.Close SaveChanges:=False strFile = Dir Loop End Sub </code></pre>","null","null","13","null","2015-07-14 12:39:18.953 UTC","null","2015-07-14 13:29:16.947 UTC","2015-07-14 13:29:16.947 UTC","null","5073840","null","5073840","31406348","2","3","","null"
"25723802","null","<p>It would be easier if you tell us more about your environement:</p> <p>Do you need a proxy to surf ? (curl is still http protocol)</p> <p>Does www.opscode.com resolve (with something like <code>dig www.opscode.com</code>)</p> <p>According to the error it sounds more a firewalling/network configuration problem than something else.</p> <p>So check:</p> <ol> <li>Is the gateway corretly configured</li> <li>If you need a proxy are the http_proxy and https_proxy env vars set ?</li> <li>If there's firewalling somewhere does it allow your machine to access port 443 on the internet</li> </ol>","null","null","2","null","2014-09-08 12:01:18.657 UTC","null","2014-09-08 12:01:18.657 UTC","null","null","null","null","3627607","25723719","2","1","","null"
"18806372","Using fgets to read from a file","<p>A Small C question for you appreciate your help:</p> <p>A file's first line is:<br> add A <br> It has more lines beneath.</p> <p>I'm reading the first line from the file using fgets:</p> <pre><code>char str [500]; fgets(strsizeof(str)filePointer); </code></pre> <p>Since fgets stops at the newline char I replace the unwanted newline char with '\0':</p> <pre><code>char *p; if ((p = strchr(str '\n')) != NULL) *p = '\0'; </code></pre> <p>Now if I print str this way:</p> <pre><code>printf( DEBUG: str:=[%s]\n str); </code></pre> <p>Why do I get a crappy output like this:</p> <pre><code>]EBUG: str:=[add A </code></pre> <p>and not:</p> <pre><code>DEBUG: str:=[add A] </code></pre> <p>??<br> Thanks!!</p>","18806580","1","3","null","2013-09-14 21:04:31.093 UTC","1","2013-09-14 21:30:03.627 UTC","2013-09-14 21:15:59.367 UTC","null","640989","null","640989","null","1","2","c","253"
"37256717","null","<p>One way would be to expose a static property off of the Application which simply returns the event aggregator and then use that to access the IEventAggregator in your platform projects</p>","null","null","2","null","2016-05-16 14:46:13.660 UTC","null","2016-05-16 14:46:13.660 UTC","null","null","null","null","5420778","37244820","2","1","","null"
